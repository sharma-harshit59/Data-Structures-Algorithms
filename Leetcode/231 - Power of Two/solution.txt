SOLUTION:
To determine whether a given integer `n` is a power of two without using loops or recursion, we use a bit manipulation trick.

Key idea:  
A positive integer `n` is a power of two if and only if its binary representation contains exactly one `1` bit.  
If `n` is such a number, then `n - 1` will have all the lower bits set to `1` and the same highest bit set to `0`.  
Performing `n & (n - 1)` will therefore yield `0` only for powers of two.

1) Check if `n` is positive:
   - Powers of two are always greater than zero.

2) Apply the bitwise check:
   - Compute `(n & (n - 1))`.
   - If the result is `0`, `n` is a power of two.
   - Otherwise, it is not.

3) Return the result of:
   - `n > 0 && (n & (n - 1)) == 0`

This approach avoids loops and recursion while working in constant time.

TIME-COMPLEXITY: O(1) - Single constant-time bitwise operation.
SPACE-COMPLEXITY: O(1) - No extra space required.