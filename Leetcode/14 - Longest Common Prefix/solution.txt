SOLUTION:
This problem asks for the longest common prefix string shared among all strings in a given list. If no such prefix exists, return an empty string.

We solve it efficiently using a pairwise prefix reduction approach — we repeatedly compute the common prefix between the current prefix and the next string, reducing the prefix until it matches all strings or becomes empty.

1)  Handle Edge Cases
    - If the list is empty, return an empty string immediately.
    - If the list has only one string, return that string itself as the prefix.

2)  Initialize the Prefix
    Take the first string as the starting prefix.

3)  Reduce the Prefix by Comparing with Each String
    For each string from the second onward:
        - Compare characters from the start until a mismatch is found or the end of either string is reached.
        - Keep only the matching portion as the new prefix (substring up to the match index).
        - If the prefix becomes empty, break early — no common prefix exists.

4)  Return the Final Prefix
    After processing all strings, whatever remains in `prefix` is the longest common prefix.

TIME-COMPLEXITY: O(n * m) — where n is the number of strings and m is the length of the shortest string.
SPACE-COMPLEXITY: O(1) — only a few variables are used.