SOLUTION:
The problem is to compute the nth Fibonacci number, defined by:
    F(0) = 0, F(1) = 1
    F(n) = F(n - 1) + F(n - 2), for n > 1

There are many ways to solve this problem, but given the constraint 0 ≤ n ≤ 30, the optimal and cleanest approach is to use an iterative method with constant space.

1)  Handle Base Cases
    If n is 0 or 1, return n directly. These are the two base Fibonacci numbers.

2)  Initialize Two Variables
    Let:
      - prev2 = F(n - 2) = 0
      - prev1 = F(n - 1) = 1

3)  Iterate from 2 to n
    Use a loop to compute the next Fibonacci number:
        - current = prev1 + prev2
        - update prev2 and prev1 for the next iteration

4)  Return the Final Value
    After the loop, `prev1` will hold the value of F(n)

TIME-COMPLEXITY: O(n) — We compute F(2) through F(n) once
SPACE-COMPLEXITY: O(1) — Only two variables are maintained