SOLUTION:
We define a harmonious array as one where the difference between the maximum and minimum element is exactly 1.

The task is to find the length of the longest harmonious subsequence — i.e., a subset (not necessarily contiguous) of the original array where max - min == 1.

To solve this, we use a frequency map to count the number of occurrences of each unique number.

1)  Count Frequencies
    Traverse the array and build a hash map or dictionary where:
        - Key = the number
        - Value = its frequency in the array

2)  Look for Valid Pairs
    For each number `num` in the frequency map:
        - If `num + 1` exists in the map, then `num` and `num + 1` can form a harmonious subsequence.
        - The length of that subsequence is: freq[num] + freq[num + 1]

3)  Track the Maximum Length
    Keep a variable to store the maximum length encountered across all valid pairs.

4)  Return the Final Answer

TIME-COMPLEXITY: O(n) — One pass to count, one pass to scan keys.
SPACE-COMPLEXITY: O(n) — For storing frequency of each number.