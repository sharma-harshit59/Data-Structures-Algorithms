SOLUTION:
To return a new array that is the concatenation of the input array with itself, we first copy all elements of the input array into a new array and then append the same elements again.

Key idea: Create a separate result array `ans` so the original array remains unchanged, and fill it in two steps.

1) Initialize:
   - Create a new array `ans` that is a copy of the input array `nums`.

2) Traverse the input array using a range-based loop:
   - For each element `num` in `nums`, append `num` to `ans`.

3) Return `ans`, which now contains two copies of the original array in order.

This approach avoids modifying the input array and keeps the logic simple by directly using push operations on the new array.

TIME-COMPLEXITY: O(n) - We process each of the `n` elements twice: once to copy and once to append.
SPACE-COMPLEXITY: O(n) extra - We store an additional array `ans` of size `n` initially, which grows to `2n` for the final result.