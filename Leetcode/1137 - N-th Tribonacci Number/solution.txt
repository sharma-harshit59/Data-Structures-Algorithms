SOLUTION:
We are given an integer `n`, and we need to compute the n-th Tribonacci number.
The Tribonacci sequence is defined as:
  - T(0) = 0
  - T(1) = 1
  - T(2) = 1
  - T(n) = T(n-1) + T(n-2) + T(n-3) for n >= 3

1. Handle base cases directly:
   - If n == 0, return 0
   - If n == 1 or n == 2, return 1

2. Use three variables `a`, `b`, and `c` to represent T(n-3), T(n-2), and T(n-1) respectively:
   - Initialize a = 0, b = 1, c = 1

3. Loop from i = 3 to n:
   - Compute the current value: res = a + b + c
   - Update a, b, c: a = b, b = c, c = res

4. After the loop, `c` contains the T(n) value, return it.

TIME-COMPLEXITY: O(N)
SPACE-COMPLEXITY: O(1) â€” only three variables are used