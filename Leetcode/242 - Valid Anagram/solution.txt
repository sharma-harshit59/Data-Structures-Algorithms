SOLUTION:
    An anagram is a rearrangement of characters of a string, meaning both strings must:
    - Have the same length
    - Contain the same characters with the same frequency

1)  Early Length Check
    If `len(s) != len(t)`, they cannot be anagrams. Return False immediately.

2)  Count and Balance Frequencies Simultaneously
    Initialize a dictionary `char_count` to store character frequencies.
    Traverse both strings in a single loop:
        - Increment the count for `s[i]`.
        - Decrement the count for `t[i]`.

3)  Verify All Counts
    After processing both strings, iterate through the values in `char_count`.
    If any value is not zero, the strings are not anagrams. Return False.

4)  Return True
    If all counts are zero, the strings contain the same characters in the same frequency and are anagrams.

TIME-COMPLEXITY: O(n) — where n is the length of the strings.
SPACE-COMPLEXITY: O(k) — where k is the number of unique characters in the strings (constant if the character set is fixed).