SOLUTION:
This problem is a variation of Binary Search.
Instead of just finding the target, you must also determine where the target should be inserted in order to maintain the sorted order if it isn’t found.
Since the array is sorted and all values are distinct, a binary search is the most efficient way to achieve the required O(log n) runtime.

1)  Initialize the Search Range
    Two pointers mark the search space:
        One at the start of the array.
        One at the end.
    You also define a variable to keep track of the midpoint index, which will be recalculated during each loop iteration.

2)  Binary Search Loop
    As long as the start pointer is less than or equal to the end pointer:
        Compute the midpoint index.
        Compare the middle element with the target.
        Three possibilities:
            If the middle element equals the target, return the midpoint — you've found the target.
            If the target is greater than the middle element, the target must be in the right half, so move the start pointer past the middle.
            If the target is less, then move the end pointer to the left half by updating it to just before the middle.
    This narrowing continues until the search space collapses (i.e., the start index surpasses the end index), indicating the target is not present in the array.

3)  Why the Final midIdx Determines Insertion Point?
    When the target is not found, the loop exits. At this point, you're left with a narrowed-down position where the target would fit in the array.
    Here’s how to understand why the final value of midIdx gives you that:
        The loop ends immediately after the valid search space is exhausted — meaning the last checked midIdx was the midpoint of the last valid subrange.
        Depending on whether the last midIdx element was less than or greater than the target, the insertion point will either be:
            Just after midIdx (if the mid value was less than the target).
            Exactly at midIdx (if the mid value was greater than or equal to the target).
        Since you're always halving the array, the last midpoint effectively acts as a pivot around which the final insertion point lies.
    This is why the code returns:
        midIdx + 1 if the mid value is smaller than the target.
        Otherwise, midIdx.
    This logic ensures the target will be placed in the correct position to maintain the array’s sorted order.

TIME-COMPLEXITY: O(log n), since each iteration halves the search space.
SPACE-COMPLEXITY: O(1), using only constant space.