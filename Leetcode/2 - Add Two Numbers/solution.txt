SOLUTION:
    This problem is a variation of elementary addition but applied to linked list data structures.
    Each linked list represents a non-negative integer in reverse order — that is, the ones digit is at the head of the list.
    The goal is to add these two numbers and return the result as a linked list in the same reversed order.

    Since we must simulate the addition process manually (digit by digit), and also manage carry-over (as we would do in basic arithmetic), we iterate through both lists simultaneously.

1)  Initialize Result List and Carry
    Create a dummy head node (resList) to simplify handling of the result list.
    Set a pointer (current) to the dummy head.
    Initialize a `carry` variable to zero — this will hold the carry-over between digit additions.

2)  Loop Through the Lists
    As long as there are nodes remaining in either l1 or l2, or there is a non-zero carry:
        - Extract the current digit from l1 (or 0 if l1 is exhausted).
        - Extract the current digit from l2 (or 0 if l2 is exhausted).
        - Add the two digits along with the current carry to get the sum.
        - Update the carry using integer division by 10 (`carry = sum // 10`).
        - Create a new node with the digit part of the sum (`sum % 10`) and link it to `current.next`.
        - Move the `current` pointer forward.
        - Move l1 and l2 to their respective next nodes, if they exist.

3)  Final Carry Handling
    The loop condition handles cases where the final sum introduces an additional digit (e.g., 5 + 5 = 10).
    If a carry remains after both lists are exhausted, it is added as a new node.

4)  Return the Result List
    The dummy head was a placeholder to simplify edge cases.
    The actual result starts at `resList.next`.

TIME-COMPLEXITY: O(max(m, n)) — We traverse both lists once, where `m` and `n` are the lengths of l1 and l2.
SPACE-COMPLEXITY: O(max(m, n)) — The result list can be at most one node longer than the longer input list (due to carry).